// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handlers/handlers.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	url "net/url"
	reflect "reflect"

	models "github.com/IvanKondrashkov/go-shortener/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// Mockrepository is a mock of repository interface.
type Mockrepository struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryMockRecorder
}

// MockrepositoryMockRecorder is the mock recorder for Mockrepository.
type MockrepositoryMockRecorder struct {
	mock *Mockrepository
}

// NewMockrepository creates a new mock instance.
func NewMockrepository(ctrl *gomock.Controller) *Mockrepository {
	mock := &Mockrepository{ctrl: ctrl}
	mock.recorder = &MockrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *Mockrepository) GetByID(id uuid.UUID) (*url.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockrepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*Mockrepository)(nil).GetByID), id)
}

// Save mocks base method.
func (m *Mockrepository) Save(id uuid.UUID, url *url.URL) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", id, url)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockrepositoryMockRecorder) Save(id, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*Mockrepository)(nil).Save), id, url)
}

// MockfileRepository is a mock of fileRepository interface.
type MockfileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockfileRepositoryMockRecorder
}

// MockfileRepositoryMockRecorder is the mock recorder for MockfileRepository.
type MockfileRepositoryMockRecorder struct {
	mock *MockfileRepository
}

// NewMockfileRepository creates a new mock instance.
func NewMockfileRepository(ctrl *gomock.Controller) *MockfileRepository {
	mock := &MockfileRepository{ctrl: ctrl}
	mock.recorder = &MockfileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfileRepository) EXPECT() *MockfileRepositoryMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockfileRepository) Load() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockfileRepositoryMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockfileRepository)(nil).Load))
}

// ReadFile mocks base method.
func (m *MockfileRepository) ReadFile() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockfileRepositoryMockRecorder) ReadFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockfileRepository)(nil).ReadFile))
}

// WriteFile mocks base method.
func (m *MockfileRepository) WriteFile(event *models.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockfileRepositoryMockRecorder) WriteFile(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockfileRepository)(nil).WriteFile), event)
}

// MockpgRepository is a mock of pgRepository interface.
type MockpgRepository struct {
	ctrl     *gomock.Controller
	recorder *MockpgRepositoryMockRecorder
}

// MockpgRepositoryMockRecorder is the mock recorder for MockpgRepository.
type MockpgRepositoryMockRecorder struct {
	mock *MockpgRepository
}

// NewMockpgRepository creates a new mock instance.
func NewMockpgRepository(ctrl *gomock.Controller) *MockpgRepository {
	mock := &MockpgRepository{ctrl: ctrl}
	mock.recorder = &MockpgRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpgRepository) EXPECT() *MockpgRepositoryMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockpgRepository) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockpgRepositoryMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockpgRepository)(nil).Ping), ctx)
}

// Save mocks base method.
func (m *MockpgRepository) Save(ctx context.Context, id uuid.UUID, url *url.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, id, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockpgRepositoryMockRecorder) Save(ctx, id, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockpgRepository)(nil).Save), ctx, id, url)
}
